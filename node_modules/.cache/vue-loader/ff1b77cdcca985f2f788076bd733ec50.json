{"remainingRequest":"/Users/abudsalem/Desktop/app copy/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/abudsalem/Desktop/app copy/client/src/toDo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/abudsalem/Desktop/app copy/client/src/toDo.vue","mtime":1668811727463},{"path":"/Users/abudsalem/Desktop/app copy/client/node_modules/cache-loader/dist/cjs.js","mtime":1668475758288},{"path":"/Users/abudsalem/Desktop/app copy/client/node_modules/babel-loader/lib/index.js","mtime":1668475758397},{"path":"/Users/abudsalem/Desktop/app copy/client/node_modules/cache-loader/dist/cjs.js","mtime":1668475758288},{"path":"/Users/abudsalem/Desktop/app copy/client/node_modules/vue-loader/lib/index.js","mtime":1668475756457}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n//master\nimport Dialog from \"./dialog.vue\"\nimport moment from 'moment'\nimport VueToastr from 'vue-toastr'\n\n    export default {\n    //life cycles\n        created(){},\n\n    //components\n    components : {\n        Dialog, VueToastr\n    },\n    //methods\n        methods: {\n            addRow(newRow) {\n                if (newRow != -1) {\n                    if (this.currRow == -1) {\n                        this.rows.push(newRow)\n                        this.toast('Successfully added task!')\n                    }\n                    else {\n                        this.rows[this.currRow] = newRow\n                        this.toast(\"Successfully edited task!\")\n                    }\n                }\n                this.show = false\n            },\n            openNewDialog() {\n                this.parentData = {\n                    adding : true,\n                    titles : this.rows.map(a => a.title),\n                    title: \"\",\n                    description : \"\",\n                    dead : \"\",\n                    priority : \"\"\n                }\n                this.show = true\n                this.currRow = -1\n            },\n            openOldDialog(a, index) {\n                this.parentData = {\n                    adding : false,\n                    titles : this.rows.map(a => a.title),\n                    title: a.title,\n                    description : a.description,\n                    dead : a.dead,\n                    priority : a.priority\n                }\n                this.show = true\n                this.currRow = index\n            },\n            closeDialog() {\n                this.show = false\n            },\n            deleteRow(i) {\n                this.rows.splice(i, 1)\n                this.completeRows.splice(i, 1)\n                this.$toasted.show('Successfully deleted task!',  { \n                    theme: \"outline\", \n                    position: \"bottom-right\", \n                    duration : 5000\n                })\n            },\n            formatDate(date) {\n                if (date) {\n                    return moment(date, \"YYYY/MM/DD\").format('MM/DD/YYYY')\n                }\n                else return ''\n            },\n            toast(str) {\n                this.$toasted.show(str,  { \n                        theme: \"outline\", \n                        position: \"bottom-right\", \n                        duration : 5000\n                        })\n            }\n        }, \n    //watchers\n        watch: {},\n    //computed\n        computed: {},\n    //global vars\n          data: global => ({\n            rows: [],\n            currRow : -1,\n            parentData: {\n                titles : [],\n                title: \"\",\n                description: \"\",\n                dead : \"\",\n                priority : \"\"\n            },\n            show : false,\n            completeRows : [],\n        }),\n    }\n",{"version":3,"sources":["toDo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"toDo.vue","sourceRoot":"src","sourcesContent":["<template>\n<v-app style='margin:30px'>\n    <v-card>\n    <!--panel header-->\n        <v-card-title class='headline primary' primary-title style='color: white; margin: auto;'>\n            <v-spacer> <div class = \"text-center\">\n                <v-icon style='color: white;'>mdi-view-headline</v-icon>\n                FRAMEWORKS\n            </div>\n            </v-spacer>\n            <div class = \"text-right\">\n                <template>\n                    <v-btn\n                        color=\"primary\"\n                        dark\n                        @click = \"openNewDialog()\"\n                    >\n                    <v-icon>mdi-plus</v-icon>\n                        Add\n                    </v-btn>\n                </template>\n                <Dialog :show = \"show\" :childData = \"parentData\" @newRow = \"addRow($event)\"></Dialog>\n            </div>\n        </v-card-title>\n    <!--panel body-->\n        <v-simple-table style='margin: 20px;'>\n            <template >\n            <!--table header-->\n                <thead>\n                <tr>\n                    <th>\n                        Title\n                    </th>\n                    <th>\n                        Description\n                    </th>\n                    <th>\n                        Deadline\n                    </th>\n                    <th>\n                        Priority\n                    </th>\n                    <th>\n                        Is Complete\n                    </th>\n                    <th>\n                        Action\n                    </th>\n                </tr>\n                </thead>\n            <!--table body-->\n                <tbody>\n                    <tr v-for = '(a,ai) in rows' :key = \"ai\">\n                        <td>{{a.title}}</td>\n                        <td>{{a.description}}</td>\n                        <td>{{formatDate(a.dead)}}</td>\n                        <td>{{a.priority}}</td>\n                        <td><input \n                            type = \"checkbox\" \n                            id = \"checkbox\"\n                            label = \"Is Complete\"\n                            :value = \"a.title\"\n                            v-model = \"completeRows\"\n                            ></td>\n                        <td><v-row v-if = \"!completeRows.includes(a.title)\">\n                            <v-btn\n                            color = \"primary\"\n                            dark\n                            @click.native = \"openOldDialog(a, ai)\"\n                            \n                            >\n                            <v-icon>mdi-square-edit-outline</v-icon>\n                                Update\n                            </v-btn>\n                        </v-row>\n                        <v-row>\n                            <v-btn\n                            color = \"error\"\n                            dark\n                            @click = \"deleteRow(ai)\"\n                            >\n                            <v-icon>mdi-close-circle</v-icon>\n                                Delete\n                            </v-btn>\n                        </v-row>\n                        </td>\n                    </tr>\n                </tbody>\n            </template>\n        </v-simple-table>\n    </v-card>\n    </v-app>\n</template>\n<script>\n//master\nimport Dialog from \"./dialog.vue\"\nimport moment from 'moment'\nimport VueToastr from 'vue-toastr'\n\n    export default {\n    //life cycles\n        created(){},\n\n    //components\n    components : {\n        Dialog, VueToastr\n    },\n    //methods\n        methods: {\n            addRow(newRow) {\n                if (newRow != -1) {\n                    if (this.currRow == -1) {\n                        this.rows.push(newRow)\n                        this.toast('Successfully added task!')\n                    }\n                    else {\n                        this.rows[this.currRow] = newRow\n                        this.toast(\"Successfully edited task!\")\n                    }\n                }\n                this.show = false\n            },\n            openNewDialog() {\n                this.parentData = {\n                    adding : true,\n                    titles : this.rows.map(a => a.title),\n                    title: \"\",\n                    description : \"\",\n                    dead : \"\",\n                    priority : \"\"\n                }\n                this.show = true\n                this.currRow = -1\n            },\n            openOldDialog(a, index) {\n                this.parentData = {\n                    adding : false,\n                    titles : this.rows.map(a => a.title),\n                    title: a.title,\n                    description : a.description,\n                    dead : a.dead,\n                    priority : a.priority\n                }\n                this.show = true\n                this.currRow = index\n            },\n            closeDialog() {\n                this.show = false\n            },\n            deleteRow(i) {\n                this.rows.splice(i, 1)\n                this.completeRows.splice(i, 1)\n                this.$toasted.show('Successfully deleted task!',  { \n                    theme: \"outline\", \n                    position: \"bottom-right\", \n                    duration : 5000\n                })\n            },\n            formatDate(date) {\n                if (date) {\n                    return moment(date, \"YYYY/MM/DD\").format('MM/DD/YYYY')\n                }\n                else return ''\n            },\n            toast(str) {\n                this.$toasted.show(str,  { \n                        theme: \"outline\", \n                        position: \"bottom-right\", \n                        duration : 5000\n                        })\n            }\n        }, \n    //watchers\n        watch: {},\n    //computed\n        computed: {},\n    //global vars\n          data: global => ({\n            rows: [],\n            currRow : -1,\n            parentData: {\n                titles : [],\n                title: \"\",\n                description: \"\",\n                dead : \"\",\n                priority : \"\"\n            },\n            show : false,\n            completeRows : [],\n        }),\n    }\n</script>"]}]}